---
- name: Check that Elasticsearch is installed
  ansible.builtin.assert:
    that:
      - r_kibana_info.installed
    msg: "Please install first the product"

- name: Kernel parameters
  when: ('sysctl' in r_kibana_configure_actions)
  block:
    - ansible.posix.sysctl:
        name: vm.max_map_count
        value: '262144'
        sysctl_set: true
        state: present
        reload: true

- name: Folder management
  when: ('folders' in r_kibana_configure_actions)
  block:
    - name: Create needed folders
      ansible.builtin.file:
        state: directory
        path: "{{ _r_kibana_loop_folders.path }}"
        owner: "{{ _r_kibana_username }}"
        group: "{{ _r_kibana_group }}"
        mode: "{{ _r_kibana_loop_folders.mode }}"
      loop:
        - path: "{{ r_kibana_configuration.path.logs }}"
          mode: '755'
        - path: "{{ r_kibana_configuration.path.data }}"
          mode: '755'
      loop_control:
        loop_var: _r_kibana_loop_folders

- name: Main configuration files
  when: ('main_files' in r_kibana_configure_actions )
  block:
    - name: Configure jvm heap settings
      ansible.builtin.copy:
        content: |-
          -Xms{{ r_kibana_jvm_initial_heap }}
          -Xmx{{ r_kibana_jvm_maximum_heap }}
        dest: "{{ _r_kibana_config_folder }}/jvm.options.d/heap.options"
        mode: 0660
        owner: root
        group: "{{ _r_kibana_group }}"
      notify:
        _r_kibana_configuration_changed
    - name: Write elasticsearch.yml configuration file
      ansible.builtin.template:
        src: kibana.yml.j2
        dest: "{{ _r_kibana_config_folder }}/elasticsearch.yml"
        mode: 0660
        owner: root
        group: "{{ _r_kibana_group }}"
      notify:
        _r_kibana_configuration_changed

- name: Keystore management
  when:
    - r_kibana_keystore_password | d(false, true)
    - ('keystore' in r_kibana_configure_actions)
  block:
    - name: Manage keystore
      bartokit.elastic.elasticsearch_keystore:
        force: "{{  'enforce_keystore' in r_kibana_configure_actions }}"
        credentials: "{{ r_kibana_keystore }}"
        password: "{{ r_kibana_keystore_password | d(omit) }}"

    - name: Put keystore password in a file
      ansible.builtin.copy:
        content: "{{ r_kibana_keystore_password }}"
        dest: "{{ r_kibana_keystore_password_file }}"
        owner: elasticsearch
        group: root
        mode: 0600

    - name: Create dropin service folder
      ansible.builtin.file:
        state: directory
        path: /etc/systemd/system/{{ _r_kibana_systemd_name }}.d
        group: root
        owner: root
        mode: 0775

    - name: Set environment variable for keystore password
      ansible.builtin.copy:
        content: |-
          [Service]
          Environment="ES_KEYSTORE_PASSPHRASE_FILE={{ r_kibana_keystore_password_file }}"
        dest: /etc/systemd/system/{{ _r_kibana_systemd_name }}.d/keystore.conf
        group: root
        owner: root
        mode: 0644

- name: SSL/TLS keystore management
  when:
    - ('ssl' in r_kibana_configure_actions)
    - r_kibana_configuration.xpack.security.enabled | bool
    - r_kibana_configuration.xpack.security.http.ssl.enabled | bool or
      r_kibana_configuration.xpack.security.transport.ssl.enabled | bool
  block:
    - name: Create the PKCS12 http file
      community.crypto.openssl_pkcs12:
        action: export
        path: "{{ _r_kibana_config_folder }}/{{ r_kibana_configuration.xpack.security.http.ssl.keystore.path }}"
        friendly_name: elastic
        privatekey_path: /etc/pki/tls/private/{{ ansible_fqdn }}.key
        certificate_path: /etc/pki/tls/certs/{{ ansible_fqdn }}.pem
        other_certificates: /etc/pki/tls/certs/ca-certificate.pem
        privatekey_passphrase: omit
        passphrase: "{{ r_kibana_keystore['xpack.security.http.ssl.keystore.secure_password'] }}"
        state: present
        owner: root
        group: "{{ _r_kibana_group }}"
        mode: '0660'

    - name: Write the CA certificate
      ansible.builtin.copy:
        content: "{{ r_kibana_configuration_ssl_certificate_authorities }}"
        dest: "{{ _r_kibana_config_folder }}/{{ r_kibana_configuration.xpack.security.transport.ssl.certificate_authorities }}"
        owner: root
        group: "{{ _r_kibana_group }}"
        mode: '0660'

- name: Flush handlers
  meta: flush_handlers